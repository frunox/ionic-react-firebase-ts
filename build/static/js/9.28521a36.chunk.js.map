{"version":3,"sources":["components/ImagePicker.tsx","pages/NewMemory.tsx"],"names":["Camera","Plugins","ImagePicker","props","useState","takenPhoto","setTakenPhoto","filePickerRef","useRef","openFilePicker","current","click","takePhotoHandler","a","Capacitor","isPluginAvailable","getPhoto","resultType","CameraResultType","Uri","source","CameraSource","quality","width","photo","webPath","pickedPhoto","path","preview","onImagePick","Fragment","className","src","alt","fill","onClick","icon","camera","slot","type","hidden","ref","onChange","event","file","target","files","fr","FileReader","onload","undefined","result","toString","readAsDataURL","NewMemory","chosenMemoryType","setChosenMemoryType","memoriesCtx","useContext","MemoriesContext","titleRef","history","useHistory","addMemoryHandler","enteredTitle","value","trim","length","console","log","addMemory","goBack","replace","defaultHref","position","onIonChange","selectedMemoryType","detail"],"mappings":"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","file":"static/js/9.28521a36.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport { IonButton, IonIcon, IonLabel } from '@ionic/react';\r\nimport { camera } from 'ionicons/icons';\r\nimport './ImagePicker.css';\r\nimport {\r\n  Plugins,\r\n  CameraResultType,\r\n  CameraSource,\r\n  Capacitor,\r\n} from '@capacitor/core';\r\n\r\nexport interface Photo {\r\n  path: string | undefined;\r\n  preview: string;\r\n}\r\n\r\nconst { Camera } = Plugins;\r\n\r\nconst ImagePicker: React.FC<{\r\n  onImagePick: (photo: Photo) => void;\r\n}> = (props) => {\r\n  const [takenPhoto, setTakenPhoto] = useState<Photo>();\r\n\r\n  const filePickerRef = useRef<HTMLInputElement>(null);\r\n\r\n  const openFilePicker = () => {\r\n    filePickerRef.current!.click();\r\n  };\r\n\r\n  const pickFileHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = event.target!.files![0];\r\n    const fr = new FileReader();\r\n    fr.onload = () => {\r\n      const photo: Photo = {\r\n        path: undefined,\r\n        preview: fr.result!.toString(),\r\n      };\r\n      setTakenPhoto(photo);\r\n      props.onImagePick(photo);\r\n    };\r\n    fr.readAsDataURL(file);\r\n  };\r\n\r\n  const takePhotoHandler = async () => {\r\n    if (!Capacitor.isPluginAvailable('Camera')) {\r\n      openFilePicker();\r\n      return;\r\n    }\r\n    try {\r\n      const photo = await Camera.getPhoto({\r\n        resultType: CameraResultType.Uri,\r\n        source: CameraSource.Camera,\r\n        quality: 80,\r\n        width: 500,\r\n      });\r\n\r\n      if (!photo || !photo.webPath) {\r\n        // could add alert here for invalid photo\r\n        return;\r\n      }\r\n\r\n      const pickedPhoto: Photo = {\r\n        path: photo.path,\r\n        preview: photo.webPath,\r\n      };\r\n\r\n      setTakenPhoto(pickedPhoto);\r\n      props.onImagePick(pickedPhoto);\r\n    } catch (error) {\r\n      openFilePicker();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"image-preview\">\r\n        {!takenPhoto && <h3>No photo chosen</h3>}\r\n        {takenPhoto && <img src={takenPhoto.preview} alt=\"Preview\" />}\r\n      </div>\r\n      <IonButton fill=\"clear\" onClick={takePhotoHandler}>\r\n        <IonIcon icon={camera} slot=\"start\" />\r\n        <IonLabel>Take Photo</IonLabel>\r\n      </IonButton>\r\n      <input\r\n        type=\"file\"\r\n        hidden\r\n        ref={filePickerRef}\r\n        onChange={pickFileHandler}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ImagePicker;\r\n","import React, { useState, useRef, useContext } from 'react';\r\nimport {\r\n  IonBackButton,\r\n  IonButton,\r\n  IonButtons,\r\n  IonCol,\r\n  IonContent,\r\n  IonGrid,\r\n  IonHeader,\r\n  IonInput,\r\n  IonItem,\r\n  IonLabel,\r\n  IonPage,\r\n  IonRow,\r\n  IonSelect,\r\n  IonSelectOption,\r\n  IonTitle,\r\n  IonToolbar,\r\n} from '@ionic/react';\r\n\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport MemoriesContext, { MemoryType } from '../data/memories-context';\r\nimport ImagePicker, { Photo } from '../components/ImagePicker';\r\n\r\nconst NewMemory: React.FC = () => {\r\n  const [takenPhoto, setTakenPhoto] = useState<Photo>();\r\n\r\n  const [chosenMemoryType, setChosenMemoryType] = useState<MemoryType>('good');\r\n\r\n  const memoriesCtx = useContext(MemoriesContext);\r\n\r\n  const titleRef = useRef<HTMLIonInputElement>(null);\r\n\r\n  const history = useHistory();\r\n\r\n  const photoPickHandler = (photo: Photo) => {\r\n    setTakenPhoto(photo);\r\n  };\r\n\r\n  const addMemoryHandler = async () => {\r\n    const enteredTitle = titleRef.current?.value;\r\n    if (\r\n      !enteredTitle ||\r\n      enteredTitle.toString().trim().length === 0 ||\r\n      !takenPhoto ||\r\n      !chosenMemoryType\r\n    ) {\r\n      // could add alert for valid title value\r\n      console.log('Invalid input');\r\n      return;\r\n    }\r\n\r\n    console.log('memoriesCtx', memoriesCtx);\r\n    memoriesCtx.addMemory(\r\n      takenPhoto,\r\n      enteredTitle.toString(),\r\n      chosenMemoryType\r\n    );\r\n    console.log('history', history);\r\n    history.length > 0 ? history.goBack() : history.replace('/good-memories');\r\n  };\r\n\r\n  const selectMemoryTypeHandler = (event: CustomEvent) => {\r\n    const selectedMemoryType = event.detail.value;\r\n    setChosenMemoryType(selectedMemoryType);\r\n  };\r\n\r\n  return (\r\n    <IonPage>\r\n      <IonHeader>\r\n        <IonToolbar>\r\n          <IonButtons slot=\"start\">\r\n            <IonBackButton defaultHref=\"good-memories\" />\r\n          </IonButtons>\r\n          <IonTitle>Add New Memory</IonTitle>\r\n        </IonToolbar>\r\n      </IonHeader>\r\n      <IonContent>\r\n        <IonGrid>\r\n          <IonRow>\r\n            <IonCol>\r\n              <IonItem>\r\n                <IonLabel position=\"floating\">Memory Title</IonLabel>\r\n                <IonInput type=\"text\" ref={titleRef}></IonInput>\r\n              </IonItem>\r\n            </IonCol>\r\n          </IonRow>\r\n          <IonRow>\r\n            <IonCol>\r\n              <IonSelect\r\n                onIonChange={selectMemoryTypeHandler}\r\n                value={chosenMemoryType}\r\n              >\r\n                <IonSelectOption value=\"good\">Good Memory</IonSelectOption>\r\n                <IonSelectOption value=\"bad\">Bad Memory</IonSelectOption>\r\n              </IonSelect>\r\n            </IonCol>\r\n          </IonRow>\r\n          <IonRow className=\"ion-text-center\">\r\n            <IonCol>\r\n              <ImagePicker onImagePick={photoPickHandler} />\r\n            </IonCol>\r\n          </IonRow>\r\n          <IonRow className=\"ion-margin-top\">\r\n            <IonCol className=\"ion-text-center\">\r\n              <IonButton onClick={addMemoryHandler}>Add Memory</IonButton>\r\n            </IonCol>\r\n          </IonRow>\r\n        </IonGrid>\r\n      </IonContent>\r\n    </IonPage>\r\n  );\r\n};\r\n\r\nexport default NewMemory;\r\n"],"sourceRoot":""}